generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  role          String    @default("staff") // admin, staff, readonly
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  auditLogs     AuditLog[]
  gmailCredential GmailCredential?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id              String           @id @default(cuid())
  name            String
  email           String?
  phone           String?
  address         String?
  addressLine1    String?
  addressLine2    String?
  city            String?
  state           String?
  postalCode      String?
  country         String?          @default("US")
  stripeId        String?          @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  invoices        InvoiceMirror[]
  newInvoices     Invoice[]
  jobs            Job[]
  serviceRequests ServiceRequest[]
}

model Job {
  id         String   @id @default(cuid())
  customerId String
  notes      String?
  status     String   @default("new")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model ServiceRequest {
  id                  String    @id @default(cuid())
  customerId          String
  status              String    @default("draft") // draft, scheduled, picked_up, in_cleaning, needs_review, ready_to_invoice, completed, canceled
  pickupDate          DateTime?
  scheduledPickupDate DateTime?
  pickupNotes         String?
  staffAssigned       String?
  internalNotes       String?
  needsReview         Boolean   @default(false)
  readyToInvoice      Boolean   @default(false)
  subtotal            Float     @default(0)
  tax                 Float     @default(0)
  total               Float     @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  customer            Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  serviceItems        ServiceItem[]
  repairItems         RepairItem[]
  invoices            Invoice[]
  attachments         ServiceRequestAttachment[]
}

model InvoiceMirror {
  id              String              @id @default(cuid())
  customerId      String
  stripeInvoiceId String              @unique
  status          String
  currency        String              @default("usd")
  subtotal        Int                 @default(0)
  tax             Int                 @default(0)
  total           Int                 @default(0)
  hostedUrl       String?
  pdfUrl          String?
  invoiceNumber   String?
  issueDate       DateTime?
  dueDate         DateTime?
  notes           String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  terms           String?
  items           InvoiceItemMirror[]
  customer        Customer            @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model InvoiceItemMirror {
  id          String        @id @default(cuid())
  invoiceId   String
  description String
  quantity    Int           @default(1)
  unitAmount  Int           @default(0)
  taxable     Boolean       @default(true)
  notes       String?
  createdAt   DateTime      @default(now())
  invoice     InvoiceMirror @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model EventLog {
  id        String   @id @default(cuid())
  type      String
  payload   Json
  createdAt DateTime @default(now())
}

// New models for enhanced admin backend

model ServiceItem {
  id          String         @id @default(cuid())
  requestId   String
  priceItemId String?
  name        String
  quantity    Int            @default(1)
  unitPrice   Float
  taxable     Boolean        @default(true)
  lineTotal   Float
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  request     ServiceRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  priceItem   PriceItem?     @relation(fields: [priceItemId], references: [id])
}

model RepairItem {
  id          String         @id @default(cuid())
  requestId   String
  description String
  amount      Float
  taxable     Boolean        @default(true)
  lineTotal   Float
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  request     ServiceRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model Invoice {
  id              String        @id @default(cuid())
  customerId      String
  requestId       String?
  number          String        @unique
  status          String        @default("draft") // draft, sent, partial_paid, paid, void
  issueDate       DateTime      @default(now())
  dueDate         DateTime?
  subtotal        Decimal       @default(0) @db.Decimal(10,2)
  tax             Decimal       @default(0) @db.Decimal(10,2)
  discount        Decimal       @default(0) @db.Decimal(10,2)
  total           Decimal       @default(0) @db.Decimal(10,2)
  balance         Decimal       @default(0) @db.Decimal(10,2)
  applyTax        Boolean       @default(true)
  taxRate         Decimal       @default(6.25) @db.Decimal(5,2)
  pdfUrl          String?
  notes           String?
  internalMemo    String?
  voidReason      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  customer        Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  request         ServiceRequest? @relation(fields: [requestId], references: [id])
  items           InvoiceItem[]
  payments        Payment[]
}

model InvoiceItem {
  id          String     @id @default(cuid())
  invoiceId   String
  priceItemId String?    // Reference to the original price item
  description String
  quantity    Int        @default(1)
  unitPrice   Decimal    @db.Decimal(10,2)
  taxable     Boolean    @default(true)
  lineTotal   Decimal    @db.Decimal(10,2)
  createdAt   DateTime   @default(now())
  invoice     Invoice    @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  priceItem   PriceItem? @relation(fields: [priceItemId], references: [id])
}

model Payment {
  id          String   @id @default(cuid())
  invoiceId   String
  method      String   // cash, check, zelle, stripe, other
  amount      Float
  receivedAt  DateTime @default(now())
  externalId  String?  // Stripe payment intent ID
  createdAt   DateTime @default(now())
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model PriceList {
  id          String      @id @default(cuid())
  name        String
  status      String      @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  effectiveAt DateTime?
  createdAt   DateTime    @default(now())
  publishedAt DateTime?
  items       PriceItem[]
}

model PriceItem {
  id          String     @id @default(cuid())
  priceListId String
  name        String
  category    String     // WASHING, ADD_ON, REPAIR
  unitPrice   Decimal    @db.Decimal(10,2)
  taxable     Boolean    @default(true)
  scope       String     @default("ITEM") // ITEM, ORDER
  active      Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  priceList   PriceList  @relation(fields: [priceListId], references: [id], onDelete: Cascade)
  serviceItems ServiceItem[]
  invoiceItems InvoiceItem[]
}

model ServiceRequestAttachment {
  id          String         @id @default(cuid())
  requestId   String
  filename    String
  url         String
  type        String         // photo, document
  createdAt   DateTime       @default(now())
  request     ServiceRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entityType String
  entityId   String
  payload    Json
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InvoiceSequence {
  year      Int      @id
  value     Int      @default(0)
  updatedAt DateTime @updatedAt
}

model GmailCredential {
  id           String   @id @default(cuid())
  userId       String   @unique
  refreshToken String   // store encrypted in real prod
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id])
}
