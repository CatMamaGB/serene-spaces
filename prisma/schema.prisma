generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "linux-musl-openssl-3.0.x", "rhel-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id              String           @id @default(cuid())
  name            String
  email           String?
  phone           String?
  address         String?
  addressLine1    String?
  addressLine2    String?
  city            String?
  state           String?
  postalCode      String?
  country         String?          @default("US")
  stripeId        String?          @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  invoices        InvoiceMirror[]
  jobs            Job[]
  serviceRequests ServiceRequest[]
}

model Job {
  id         String   @id @default(cuid())
  customerId String
  notes      String?
  status     String   @default("new")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model ServiceRequest {
  id                  String    @id @default(cuid())
  customerId          String
  services            String[]
  address             String
  pickupDate          DateTime?
  repairNotes         String?
  waterproofingNotes  String?
  allergies           String?
  status              String    @default("pending")
  estimatedCost       Float?
  actualCost          Float?
  scheduledPickupDate DateTime?
  completedDate       DateTime?
  notes               String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  customer            Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model InvoiceMirror {
  id              String              @id @default(cuid())
  customerId      String
  stripeInvoiceId String              @unique
  status          String
  currency        String              @default("usd")
  subtotal        Int                 @default(0)
  tax             Int                 @default(0)
  total           Int                 @default(0)
  hostedUrl       String?
  pdfUrl          String?
  invoiceNumber   String?
  issueDate       DateTime?
  dueDate         DateTime?
  notes           String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  terms           String?
  items           InvoiceItemMirror[]
  customer        Customer            @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model InvoiceItemMirror {
  id          String        @id @default(cuid())
  invoiceId   String
  description String
  quantity    Int           @default(1)
  unitAmount  Int           @default(0)
  taxable     Boolean       @default(true)
  notes       String?
  createdAt   DateTime      @default(now())
  invoice     InvoiceMirror @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model EventLog {
  id        String   @id @default(cuid())
  type      String
  payload   Json
  createdAt DateTime @default(now())
}
